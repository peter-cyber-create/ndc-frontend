  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    setSubmissionStage('validating')

    // Validate required fields
    if (!formData.title || !formData.presentation_type || !formData.conference_track || 
        !formData.subcategory || !formData.firstName || !formData.lastName || !formData.email || 
        !formData.phone || !formData.institution || !formData.position || 
        !formData.district || !formData.abstract_summary || !formData.keywords ||
        !formData.background || !formData.methods || !formData.findings || 
        !formData.conclusion || !formData.consent_to_publish || !formData.abstract_file) {
      showError('Please fill in all required fields marked with * and upload your abstract file.')
      setIsSubmitting(false)
      setSubmissionStage('')
      return
    }

    try {
      setSubmissionStage('uploading')
      
      const formDataToSend = new FormData()
      formDataToSend.append('title', formData.title)
      formDataToSend.append('presentation_type', formData.presentation_type)
      formDataToSend.append('conference_track', formData.conference_track)
      formDataToSend.append('subcategory', formData.subcategory)
      formDataToSend.append('firstName', formData.firstName)
      formDataToSend.append('lastName', formData.lastName)
      formDataToSend.append('email', formData.email)
      formDataToSend.append('phone', formData.phone)
      formDataToSend.append('institution', formData.institution)
      formDataToSend.append('position', formData.position)
      formDataToSend.append('district', formData.district)
      formDataToSend.append('co_authors', formData.co_authors)
      formDataToSend.append('abstract_summary', formData.abstract_summary)
      formDataToSend.append('keywords', formData.keywords)
      formDataToSend.append('background', formData.background)
      formDataToSend.append('methods', formData.methods)
      formDataToSend.append('findings', formData.findings)
      formDataToSend.append('conclusion', formData.conclusion)
      formDataToSend.append('policy_implications', formData.policy_implications)
      formDataToSend.append('conflict_of_interest', formData.conflict_of_interest.toString())
      formDataToSend.append('ethical_approval', formData.ethical_approval.toString())
      formDataToSend.append('consent_to_publish', formData.consent_to_publish.toString())
      
      if (formData.abstract_file) {
        formDataToSend.append('abstract_file', formData.abstract_file)
      }

      setSubmissionStage('saving')
      
      const response = await fetch('/api/abstracts', {
        method: 'POST',
        body: formDataToSend,
      })

      setSubmissionStage('finalizing')
      
      const result = await response.json()

      if (response.ok && result.success) {
        success('Abstract submitted successfully! You will receive a confirmation email shortly.')
        router.push('/')
        
        // Reset form
        setFormData({
          title: '',
          presentation_type: '',
          conference_track: '',
          subcategory: '',
          firstName: '',
          lastName: '',
          email: '',
          phone: '',
          institution: '',
          position: '',
          district: '',
          co_authors: '',
          abstract_summary: '',
          keywords: '',
          background: '',
          methods: '',
          findings: '',
          conclusion: '',
          policy_implications: '',
          abstract_file: null,
          conflict_of_interest: false,
          ethical_approval: false,
          consent_to_publish: false
        })
      } else {
        const errorMessage = result.error || result.message || 'Abstract submission failed. Please try again.'
        showError(errorMessage)
      }
    } catch (error) {
      showError('Could not connect to the server. Please try again later.')
    } finally {
      setIsSubmitting(false)
      setSubmissionStage('')
    }
  }
